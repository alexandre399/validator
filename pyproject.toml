[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "setuptools-scm"]

[project]
authors = [{name = "alexandre399", email = "alexandre399.pypi@gmail.com"}]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = []
description = "Example of an Implementation of the Validator Object for Python"
dynamic = ["version"]
keywords = ["validator"]
license = {file = "LICENSE"}
maintainers = [{name = "alexandre399", email = "alexandre399.pypi@gmail.com"}]
name = "validator"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.10"

[project.urls]
Changelog = "https://github.com/alexandre399/validator/blob/main/CHANGELOG.md"
Documentation = "https://github.com/alexandre399/validator/blob/main/README.md"
Homepage = "https://github.com/alexandre399/validator/tree/main"
Issues = "https://github.com/alexandre399/validator/issues"
Repository = "https://github.com/alexandre399/validator.git"

[tool.setuptools_scm]
version_file = "validator/_version.py"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  "__pycache__",
  "build",
  ".eggs",
  ".git",
  ".mypy_cache",
  ".pyenv",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  ".vscode",
  "build",
  "site-packages",
  "venv",
  "example.py",
]

# Same as Black.
indent-width = 4
line-length = 100

# Assume Python 3.10
target-version = "py310"
unsafe-fixes = true

[tool.ruff.lint]
exclude = ["tests"]
ignore = ["D", "COM812", "SLF001", "ERA001"]
select = ["ALL"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PL", "S", "ARG", "ANN"]

[tool.ruff.format]
exclude = ["**/_version.py"]

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
exclude = [
  "__pycache__",
  "build",
  ".eggs",
  ".git",
  ".mypy_cache",
  ".pyenv",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  ".vscode",
  "build",
  "site-packages",
  "tests",
  "venv",
  "example.py",
]
implicit_optional = true

[tool.commitizen]
name = "cz_conventional_commits"

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.ruff_cache/*,build/*,.venv*,__pycache__/*,dist/*,tests/*"

# Configuration for pytest
# https://docs.pytest.org/en/latest/reference/customize.html#pyproject-toml
[tool.pytest.ini_options]
norecursedirs = [] 
testpaths = "tests" # directory containing your tests
# Warnings that should be ignored
filterwarnings = [
  "ignore::DeprecationWarning",
]
# custom markers that can be used using pytest.mark
markers = []

[tool.coverage.report]
fail_under = 75

# Configuration for coverage.py
[tool.coverage.run]
branch = true
omit = ["**/_version.py", "**/user.py"]
source = [
  "validator",
]
